services:
 
  # postgrestest:
  #   image: postgres:17.2-bookworm
  #   container_name: postgrestest
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD} 
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     PGDATA: /var/lib/postgresql/data/
  #   ports:
  #     - "35102::5432"
  #   volumes:
  #     - postgres-datatest:/var/lib/postgresql/data/
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres_db" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   restart: unless-stopped
  #   networks:
  #     - monitoring-network
  #     - jupyterhub-network

  pg_metrics_exporter:
    build:
      context: ./pg_metrics_exporter
      dockerfile: Dockerfile.exporter
    container_name: pg_metrics_exportertest
    volumes:
      - ./metrics:/metrics  # Монтируем директорию для метрик
    environment:
      POSTGRES_HOST: postgrestest
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    # depends_on:
    #   - postgrestest
    restart: unless-stopped
    networks:
      - monitoring-network

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheustest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-datatest:/prometheus
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "35101:9090"
    restart: unless-stopped
    networks:
      - monitoring-network
      - jupyterhub-network
    
  grafana:
    image: grafana/grafana-enterprise:11.5.1
    container_name: grafanatest
    ports:
      - "35100:3000"
    networks:
      - monitoring-network
    volumes:
      - grafana-datatest:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.2
    container_name: cadvisortest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring-network
    restart: unless-stopped
  
  node-exporter:
    image: prom/node-exporter:v1.5.0 
    container_name: node-exportertest
    ports:
      - "35102:9100"
    networks:
      - monitoring-network
    volumes:
      - /var/lib/node_exporter:/app/metrics:ro
    command:
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
      - '--collector.textfile.directory=/app/metrics'
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.28.0
    container_name: alertmanagertest
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - "9093:9093"
    networks:
      - monitoring-network
    restart: unless-stopped
    
volumes:
  postgres-datatest:
  grafana-datatest:
  prometheus-datatest:

networks:
  monitoring-network:
    name: monitoring-network
  jupyterhub-network:
    name: jupyterhub-network
    external: true


